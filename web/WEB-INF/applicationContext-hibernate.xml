<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for PetClinic on Hibernate.
  -->
<beans>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
  
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="/WEB-INF/jdbc.properties"/>
	</bean>

	<!-- Local DataSource that works in any environment -->
	<!-- Note that DriverManagerDataSource does not pool; it is not intended for production -->
	<!-- See JPetStore for an example of using Commons DBCP BasicDataSource as alternative -->
	<!-- See Image Database for an example of using C3P0 ComboPooledDataSource as alternative -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- JNDI DataSource for J2EE environments -->
	<!--
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/petclinic"/>
	</bean>
	-->

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mappingResources">
			<value>dashboard.hbm.xml</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
			</map>
		</property>
	</bean>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
	  - PetClinic's central data access object: Hibernate implementation.
    -->
	<bean id="categoryGroupDAO" class="org.reubo.dashboard.services.categorymanagement.CategoryGroupDAO">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
        <bean id="personalizationDAO" class="org.reubo.dashboard.services.personalization.PersonalizationDAO">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
        <bean id="categoryGroupManager" class="org.reubo.dashboard.services.categorymanagement.CategoryGroupManagerImpl">
               <property name="categoryGroupDAO" ref="categoryGroupDAO"/>
        </bean>
         <bean id="personalizationManager" class="org.reubo.dashboard.services.personalization.PersonalizationManagerImpl">
               <property name="personalizationDAO" ref="personalizationDAO"/>
        </bean>
        <bean id="appServiceTX"
                    class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="target" ref="categoryGroupManager"/>
        <property name="transactionAttributes">
         <props>
        <!--  <prop key="createApplicant">PROPAGATION_REQUIRED</prop>
          <prop key="updateApplicant">PROPAGATION_REQUIRED</prop>
          <prop key="deleteApplicant">PROPAGATION_REQUIRED</prop> -->
          <prop key="*">PROPAGATION_SUPPORTS,readOnly</prop>
         </props>
       </property>
      </bean>


	<!--
		- Transactional proxy for PetClinic's central data access object.
		-
		- Defines specific transaction attributes with "readOnly" markers,
		- which is an optimization that is particularly valuable with Hibernate
		- (to suppress unnecessary flush attempts for read-only operations).
		-
		- Note that in a real-life app with multiple transaction proxies,
		- you will probably want to use parent and child bean definitions
		- as described in the manual, to reduce duplication.
    -->
	

</beans>
